export const PROMPT_STEPS = [
  {
    id: 'problem',
    title: 'Problem / Why Now',
    description: 'What problem are you solving and why is now the right time?',
    placeholder: 'Describe the core problem your startup addresses and what makes this the perfect timing...',
    field: 'problem_now'
  },
  {
    id: 'customer',
    title: 'Customer + GTM',
    description: 'Who are your customers and how will you reach them?',
    placeholder: 'Define your target customer segments and your go-to-market strategy...',
    field: 'customer_gtm'
  },
  {
    id: 'traction',
    title: 'Progress or Traction',
    description: 'What traction or validation do you have so far?',
    placeholder: 'Share your key metrics, customer feedback, partnerships, or other validation...',
    field: 'traction_proud'
  },
  {
    id: 'milestone',
    title: '6-Month Milestone',
    description: 'What do you want to achieve in the next 6 months?',
    placeholder: 'Describe your key objectives and milestones for the next 6 months...',
    field: 'milestone_6mo'
  },
  {
    id: 'cash',
    title: 'Cash + Burn',
    description: 'What\'s your current cash position and monthly burn rate?',
    placeholder: 'Current cash: $50,000\nMonthly burn: $8,000',
    field: 'cash_on_hand'
  },
  {
    id: 'risk',
    title: 'Risks / Assumptions',
    description: 'What are your biggest risks and key assumptions?',
    placeholder: 'Identify the main risks to your business and key assumptions you\'re making...',
    field: 'risky_assumption'
  }
];

export const generateFounderBrief = (responses: any): string => {
  const runway = responses.cash ? calculateRunwayFromResponse(responses.cash) : 'Not specified';
  
  return `# ${responses.name || 'Startup Brief'}

## The Problem
${responses.problem || 'Not specified'}

## Target Market & GTM
${responses.customer || 'Not specified'}

## Current Traction
${responses.traction || 'Early stage - seeking validation'}

## 6-Month Goals
${responses.milestone || 'Not specified'}

## Financial Position
${responses.cash || 'Not specified'}
Runway: ${runway}

## Key Risks & Assumptions
${responses.risk || 'Not specified'}

---
*Generated by Banyan - Transform founder instinct into investor-ready clarity*`;
};

export const generateVCSummary = (responses: any): string => {
  const runway = responses.cash ? calculateRunwayFromResponse(responses.cash) : 'Unknown';
  
  return `## Investment Summary

**Stage:** ${responses.stage || 'Early'}
**Runway:** ${runway}

### Key Highlights
- **Problem:** ${responses.problem ? responses.problem.substring(0, 100) + '...' : 'Not specified'}
- **Market:** ${responses.customer ? responses.customer.substring(0, 100) + '...' : 'Not specified'}
- **Traction:** ${responses.traction ? responses.traction.substring(0, 100) + '...' : 'Early stage'}

### Next 6 Months
${responses.milestone || 'Milestones not specified'}

### Financial Health
${responses.cash || 'Financial details not provided'}

### Risk Assessment
${responses.risk ? responses.risk.substring(0, 150) + '...' : 'Risk analysis pending'}

---
*VC-ready summary generated by Banyan*`;
};

function calculateRunwayFromResponse(cashResponse: string): string {
  // Simple regex to extract numbers from cash response
  const cashMatch = cashResponse.match(/cash[:\s]*\$?([\d,]+)/i);
  const burnMatch = cashResponse.match(/burn[:\s]*\$?([\d,]+)/i);
  
  if (cashMatch && burnMatch) {
    const cash = parseInt(cashMatch[1].replace(/,/g, ''));
    const burn = parseInt(burnMatch[1].replace(/,/g, ''));
    
    if (burn > 0) {
      const months = Math.floor(cash / burn);
      return `${months} months`;
    }
  }
  
  return 'Unknown';
}
