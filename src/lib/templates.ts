export const PROMPT_STEPS = [
  {
    id: 'vision',
    title: 'What are you building, for whom, and why now?',
    description: 'A single question that merges vision, audience, and urgency. Tell us about the problem, who experiences it, and what makes this the right moment.',
    placeholder: 'Example: We\'re building a dynamic dispatch layer for mid-market construction contractors who lose 30% of crew time to delivery delays. Cities are tightening curb access and contractors are moving to software-first scheduling — APIs and telematics are finally standardized.',
    field: 'vision_audience_timing'
  },
  {
    id: 'decisions',
    title: 'What decisions feel hardest right now?',
    description: 'Invites friction and reveals blind spots without defensiveness. What strategic choices are keeping you up at night?',
    placeholder: 'Example: Should we build horizontally across construction trades or go deep with GCs first? And do we hire a head of sales now or wait until we hit $500K ARR?',
    field: 'hard_decisions'
  },
  {
    id: 'success',
    title: 'What does success look like for you — financially and culturally?',
    description: 'Keep dual horizons visible: performance and people. What metrics matter and what kind of company do you want to build?',
    placeholder: 'Example: Financially, we want to build a $100M+ revenue business with strong unit economics. Culturally, we want a team where operators feel ownership and where we never compromise on safety.',
    field: 'success_definition'
  },
  {
    id: 'principles',
    title: 'What beliefs or principles should your company never compromise on?',
    description: 'Shifts from aspiration to ethic — the durable backbone. What are your non-negotiables?',
    placeholder: 'Example: Safety first, always. Speed without shortcuts. We earn trust by being radically transparent with customers about delays.',
    field: 'core_principles'
  },
  {
    id: 'capabilities',
    title: 'What capabilities or systems do you need to make this vision real?',
    description: 'Translates belief into infrastructure. What do you need to build, hire, or integrate to execute?',
    placeholder: 'Example: We need real-time routing algorithms, mobile app for foremen, integrations with major construction software, and a sales team that understands operations.',
    field: 'required_capabilities'
  },
  {
    id: 'reality',
    title: 'Where are you now — team, traction, stage, rough runway?',
    description: 'Captures factual context only after the story has coherence. Give us the current state: team size, revenue/users, funding, burn.',
    placeholder: 'Example: 3 co-founders (ex-Procore PM, ex-Uber Freight ops, CTO). 2 paid pilots, 18 active sites, 1,240 drops coordinated. $500K cash, $25K monthly burn (20 months runway).',
    field: 'current_state'
  },
  {
    id: 'vision_purpose',
    title: 'Vision: Why does your company exist?',
    description: 'In one clean sentence, what is the fundamental reason you\'re building this? What change are you bringing to the world?',
    placeholder: 'Example: To eliminate construction site delivery delays that waste time and money',
    field: 'vision_purpose'
  },
  {
    id: 'vision_endstate',
    title: 'Vision: What does the end state look like?',
    description: 'Paint your end-state in 2–3 sentences. When you\'ve achieved your mission, what will the world look like?',
    placeholder: 'Example: A world where every construction site receives materials exactly when and where needed, eliminating costly delays and improving project efficiency across the industry',
    field: 'vision_endstate'
  }
];

export const generateFounderBrief = (responses: any): string => {
  const runway = responses.cash ? calculateRunwayFromResponse(responses.cash) : 'Not specified';
  
  return `# ${responses.name || 'Startup Brief'}

## The Problem
${responses.problem || 'Not specified'}

## Target Market & GTM
${responses.customer || 'Not specified'}

## Current Traction
${responses.traction || 'Early stage - seeking validation'}

## 6-Month Goals
${responses.milestone || 'Not specified'}

## Financial Position
${responses.cash || 'Not specified'}
Runway: ${runway}

## Key Risks & Assumptions
${responses.risk || 'Not specified'}

---
*Generated by Banyan - Transform founder instinct into investor-ready clarity*`;
};

export const generateVCSummary = (responses: any): string => {
  const runway = responses.cash ? calculateRunwayFromResponse(responses.cash) : 'Unknown';
  
  return `## Investment Summary

**Stage:** ${responses.stage || 'Early'}
**Runway:** ${runway}

### Key Highlights
- **Problem:** ${responses.problem ? responses.problem.substring(0, 100) + '...' : 'Not specified'}
- **Market:** ${responses.customer ? responses.customer.substring(0, 100) + '...' : 'Not specified'}
- **Traction:** ${responses.traction ? responses.traction.substring(0, 100) + '...' : 'Early stage'}

### Next 6 Months
${responses.milestone || 'Milestones not specified'}

### Financial Health
${responses.cash || 'Financial details not provided'}

### Risk Assessment
${responses.risk ? responses.risk.substring(0, 150) + '...' : 'Risk analysis pending'}

---
*VC-ready summary generated by Banyan*`;
};

function calculateRunwayFromResponse(cashResponse: string): string {
  // Simple regex to extract numbers from cash response
  const cashMatch = cashResponse.match(/cash[:\s]*\$?([\d,]+)/i);
  const burnMatch = cashResponse.match(/burn[:\s]*\$?([\d,]+)/i);
  
  if (cashMatch && burnMatch) {
    const cash = parseInt(cashMatch[1].replace(/,/g, ''));
    const burn = parseInt(burnMatch[1].replace(/,/g, ''));
    
    if (burn > 0) {
      const months = Math.floor(cash / burn);
      return `${months} months`;
    }
  }
  
  return 'Unknown';
}
