/**
 * Enhanced PDF Export Utility for Banyan
 * Exports briefs, frameworks, and summaries to beautifully formatted PDFs
 */

import jsPDF from 'jspdf';

// Banyan brand colors
const COLORS = {
  primary: '#2563eb', // blue-600
  secondary: '#64748b', // slate-500
  accent: '#f59e0b', // amber-500
  success: '#10b981', // emerald-500
  text: '#1e293b', // slate-800
  textLight: '#64748b', // slate-500
  border: '#e2e8f0', // slate-200
  background: '#f8fafc', // slate-50
};

interface PDFExportOptions {
  title?: string;
  subtitle?: string;
  companyName?: string;
  generatedDate?: string;
}

export class BanyanPDFExporter {
  private pdf: jsPDF;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number = 20;
  private currentY: number;
  private lineHeight: number = 7;

  constructor() {
    this.pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    this.pageWidth = this.pdf.internal.pageSize.getWidth();
    this.pageHeight = this.pdf.internal.pageSize.getHeight();
    this.currentY = this.margin;
  }

  /**
   * Add header with Banyan branding
   */
  private addHeader(title: string, subtitle?: string) {
    // Banyan logo text (you can replace with actual logo image later)
    this.pdf.setFontSize(24);
    this.pdf.setTextColor(COLORS.primary);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.text('Banyan', this.margin, this.currentY);
    
    this.currentY += 10;
    
    // Title
    this.pdf.setFontSize(20);
    this.pdf.setTextColor(COLORS.text);
    this.pdf.text(title, this.margin, this.currentY);
    
    this.currentY += 8;
    
    // Subtitle
    if (subtitle) {
      this.pdf.setFontSize(12);
      this.pdf.setTextColor(COLORS.textLight);
      this.pdf.setFont('helvetica', 'normal');
      this.pdf.text(subtitle, this.margin, this.currentY);
      this.currentY += 6;
    }
    
    // Horizontal line
    this.pdf.setDrawColor(COLORS.border);
    this.pdf.setLineWidth(0.5);
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY);
    this.currentY += 10;
  }

  /**
   * Add footer with page numbers
   */
  private addFooter(pageNum: number) {
    const footerY = this.pageHeight - 10;
    this.pdf.setFontSize(9);
    this.pdf.setTextColor(COLORS.textLight);
    this.pdf.setFont('helvetica', 'normal');
    
    // Page number
    const pageText = `Page ${pageNum}`;
    const textWidth = this.pdf.getTextWidth(pageText);
    this.pdf.text(pageText, this.pageWidth - this.margin - textWidth, footerY);
    
    // Generated by Banyan
    this.pdf.text('Generated by Banyan', this.margin, footerY);
  }

  /**
   * Add a section heading
   */
  private addSectionHeading(text: string, level: number = 1) {
    this.checkPageBreak(15);
    
    const fontSize = level === 1 ? 16 : level === 2 ? 14 : 12;
    this.pdf.setFontSize(fontSize);
    this.pdf.setTextColor(COLORS.primary);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.text(text, this.margin, this.currentY);
    
    this.currentY += level === 1 ? 8 : 6;
  }

  /**
   * Add paragraph text
   */
  private addParagraph(text: string, options: { indent?: boolean; bold?: boolean } = {}) {
    this.checkPageBreak(20);
    
    this.pdf.setFontSize(10);
    this.pdf.setTextColor(COLORS.text);
    this.pdf.setFont('helvetica', options.bold ? 'bold' : 'normal');
    
    const maxWidth = this.pageWidth - (2 * this.margin) - (options.indent ? 5 : 0);
    const lines = this.pdf.splitTextToSize(text, maxWidth);
    
    const x = this.margin + (options.indent ? 5 : 0);
    
    lines.forEach((line: string) => {
      this.checkPageBreak(7);
      this.pdf.text(line, x, this.currentY);
      this.currentY += this.lineHeight;
    });
    
    this.currentY += 2;
  }

  /**
   * Add bullet list
   */
  private addBulletList(items: string[]) {
    items.forEach(item => {
      this.checkPageBreak(10);
      
      this.pdf.setFontSize(10);
      this.pdf.setTextColor(COLORS.text);
      this.pdf.setFont('helvetica', 'normal');
      
      // Bullet point
      this.pdf.setFillColor(COLORS.primary);
      this.pdf.circle(this.margin + 2, this.currentY - 1.5, 1, 'F');
      
      // Text
      const maxWidth = this.pageWidth - (2 * this.margin) - 8;
      const lines = this.pdf.splitTextToSize(item, maxWidth);
      
      lines.forEach((line: string, index: number) => {
        this.checkPageBreak(7);
        this.pdf.text(line, this.margin + 6, this.currentY);
        this.currentY += this.lineHeight;
      });
      
      this.currentY += 1;
    });
    
    this.currentY += 2;
  }

  /**
   * Add key-value pair
   */
  private addKeyValue(key: string, value: string) {
    this.checkPageBreak(15);
    
    // Key (label)
    this.pdf.setFontSize(10);
    this.pdf.setTextColor(COLORS.textLight);
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.text(`${key}:`, this.margin, this.currentY);
    
    // Value
    const keyWidth = this.pdf.getTextWidth(`${key}: `);
    this.pdf.setTextColor(COLORS.text);
    this.pdf.setFont('helvetica', 'normal');
    
    const maxWidth = this.pageWidth - (2 * this.margin) - keyWidth - 2;
    const lines = this.pdf.splitTextToSize(value, maxWidth);
    
    lines.forEach((line: string, index: number) => {
      if (index === 0) {
        this.pdf.text(line, this.margin + keyWidth + 2, this.currentY);
      } else {
        this.currentY += this.lineHeight;
        this.checkPageBreak(7);
        this.pdf.text(line, this.margin, this.currentY);
      }
    });
    
    this.currentY += this.lineHeight + 2;
  }

  /**
   * Add quality score badge
   */
  private addScoreBadge(label: string, score: number, x?: number, y?: number) {
    const scoreX = x || this.margin;
    const scoreY = y || this.currentY;
    
    // Determine color based on score
    let color = COLORS.textLight;
    if (score >= 8) color = COLORS.success;
    else if (score >= 6) color = COLORS.primary;
    else if (score >= 4) color = COLORS.accent;
    
    // Badge background
    this.pdf.setFillColor(color);
    this.pdf.roundedRect(scoreX, scoreY - 4, 25, 8, 2, 2, 'F');
    
    // Score text
    this.pdf.setFontSize(10);
    this.pdf.setTextColor('#ffffff');
    this.pdf.setFont('helvetica', 'bold');
    this.pdf.text(`${score}/10`, scoreX + 4, scoreY + 1);
    
    // Label
    this.pdf.setFontSize(9);
    this.pdf.setTextColor(COLORS.text);
    this.pdf.setFont('helvetica', 'normal');
    this.pdf.text(label, scoreX + 30, scoreY + 1);
  }

  /**
   * Check if we need a page break
   */
  private checkPageBreak(requiredSpace: number) {
    if (this.currentY + requiredSpace > this.pageHeight - 20) {
      this.addPageBreak();
    }
  }

  /**
   * Add page break
   */
  private addPageBreak() {
    const currentPage = this.pdf.getCurrentPageInfo().pageNumber;
    this.addFooter(currentPage);
    this.pdf.addPage();
    this.currentY = this.margin;
  }

  /**
   * Export Founder Brief
   */
  exportFounderBrief(brief: any, options: PDFExportOptions = {}) {
    // Header
    this.addHeader(
      options.title || 'Founder Brief',
      options.subtitle || brief.name || 'Strategic Foundation Document'
    );

    // Company info if available
    if (options.companyName) {
      this.addKeyValue('Company', options.companyName);
    }
    if (options.generatedDate) {
      this.addKeyValue('Generated', new Date(options.generatedDate).toLocaleDateString());
    }
    this.currentY += 5;

    // Problem Statement
    if (brief.problem) {
      this.addSectionHeading('Problem Statement');
      this.addParagraph(brief.problem);
    }

    // Solution
    if (brief.solution) {
      this.addSectionHeading('Our Solution');
      this.addParagraph(brief.solution);
    }

    // Market Opportunity
    if (brief.market) {
      this.addSectionHeading('Market Opportunity');
      this.addParagraph(brief.market);
    }

    // Unique Value Proposition
    if (brief.uniqueValue) {
      this.addSectionHeading('What Makes Us Different');
      this.addParagraph(brief.uniqueValue);
    }

    // Target Customer
    if (brief.targetCustomer) {
      this.addSectionHeading('Target Customer');
      this.addParagraph(brief.targetCustomer);
    }

    // Business Model
    if (brief.businessModel) {
      this.addSectionHeading('Business Model');
      this.addParagraph(brief.businessModel);
    }

    // Traction
    if (brief.traction) {
      this.addSectionHeading('Current Traction');
      this.addParagraph(brief.traction);
    }

    // Team
    if (brief.team) {
      this.addSectionHeading('Team');
      this.addParagraph(brief.team);
    }

    // Competition
    if (brief.competition) {
      this.addSectionHeading('Competitive Landscape');
      this.addParagraph(brief.competition);
    }

    // Add final footer
    const finalPage = this.pdf.getCurrentPageInfo().pageNumber;
    this.addFooter(finalPage);
  }

  /**
   * Export Vision Framework
   */
  exportVisionFramework(framework: any, options: PDFExportOptions = {}) {
    // Header
    this.addHeader(
      options.title || 'Vision Framework',
      options.subtitle || 'Strategic Operating System'
    );

    // Metadata
    if (options.companyName) {
      this.addKeyValue('Company', options.companyName);
    }
    if (options.generatedDate) {
      this.addKeyValue('Generated', new Date(options.generatedDate).toLocaleDateString());
    }
    this.currentY += 5;

    // Vision
    if (framework.vision) {
      this.addSectionHeading('Vision');
      this.addParagraph(framework.vision);
    }

    // Strategy
    if (framework.strategy && framework.strategy.length > 0) {
      this.addSectionHeading('Strategy: How We Win');
      this.addBulletList(framework.strategy);
    }

    // Operating Principles
    if (framework.operating_principles && framework.operating_principles.length > 0) {
      this.addSectionHeading('Operating Principles');
      this.addBulletList(framework.operating_principles);
    }

    // Near-term Bets
    if (framework.near_term_bets && framework.near_term_bets.length > 0) {
      this.addSectionHeading('Near-term Bets');
      framework.near_term_bets.forEach((bet: any) => {
        this.checkPageBreak(20);
        this.addParagraph(`${bet.bet}`, { bold: true });
        this.addKeyValue('Owner', bet.owner);
        this.addKeyValue('Timeline', bet.horizon);
        this.addKeyValue('Success Metric', bet.measure);
        this.currentY += 3;
      });
    }

    // Metrics
    if (framework.metrics && framework.metrics.length > 0) {
      this.addSectionHeading('Key Metrics');
      framework.metrics.forEach((metric: any) => {
        this.checkPageBreak(15);
        this.addKeyValue(metric.name, `${metric.target} (${metric.cadence})`);
      });
    }

    // Tensions
    if (framework.tensions && framework.tensions.length > 0) {
      this.addSectionHeading('Tensions to Watch');
      this.addBulletList(framework.tensions);
    }

    // Add final footer
    const finalPage = this.pdf.getCurrentPageInfo().pageNumber;
    this.addFooter(finalPage);
  }

  /**
   * Export complete document (Brief + Framework)
   */
  exportComplete(data: {
    brief?: any;
    framework?: any;
    vcSummary?: any;
    qualityScores?: any;
    lensScores?: any;
  }, options: PDFExportOptions = {}) {
    // Cover page
    this.addHeader(
      options.title || 'Strategic Document Package',
      options.subtitle || 'Comprehensive Business Overview'
    );

    // Metadata
    if (options.companyName) {
      this.addKeyValue('Company', options.companyName);
    }
    if (options.generatedDate) {
      this.addKeyValue('Generated', new Date(options.generatedDate).toLocaleDateString());
    }
    
    // Quality scores if available
    if (data.lensScores) {
      this.currentY += 10;
      this.addSectionHeading('Quality Assessment', 2);
      this.currentY += 5;
      
      const scores = data.lensScores.scores || data.lensScores;
      let scoreX = this.margin;
      
      if (scores.clarity) {
        this.addScoreBadge('Clarity', scores.clarity, scoreX, this.currentY);
        scoreX += 60;
      }
      if (scores.alignment) {
        this.addScoreBadge('Alignment', scores.alignment, scoreX, this.currentY);
        scoreX += 60;
      }
      if (scores.actionability) {
        this.addScoreBadge('Actionability', scores.actionability, scoreX, this.currentY);
      }
      
      this.currentY += 15;
    }

    this.addPageBreak();

    // Brief
    if (data.brief) {
      this.exportFounderBrief(data.brief, { ...options, title: 'Founder Brief' });
      this.addPageBreak();
    }

    // Framework
    if (data.framework) {
      this.exportVisionFramework(data.framework, { ...options, title: 'Vision Framework' });
    }

    // Add final footer
    const finalPage = this.pdf.getCurrentPageInfo().pageNumber;
    this.addFooter(finalPage);
  }

  /**
   * Save PDF
   */
  save(filename: string = 'banyan-document.pdf') {
    this.pdf.save(filename);
  }

  /**
   * Get PDF as blob (for uploading or preview)
   */
  getBlob(): Blob {
    return this.pdf.output('blob');
  }

  /**
   * Get PDF as data URL (for preview in new tab)
   */
  getDataUrl(): string {
    return this.pdf.output('dataurlstring');
  }
}

/**
 * Quick export function for Founder Brief
 */
export function exportBriefToPDF(brief: any, filename?: string) {
  const exporter = new BanyanPDFExporter();
  exporter.exportFounderBrief(brief, {
    companyName: brief.name,
    generatedDate: brief.createdAt || new Date().toISOString()
  });
  exporter.save(filename || `${brief.name?.replace(/\s+/g, '-') || 'brief'}-${Date.now()}.pdf`);
}

/**
 * Quick export function for Vision Framework
 */
export function exportFrameworkToPDF(framework: any, filename?: string) {
  const exporter = new BanyanPDFExporter();
  exporter.exportVisionFramework(framework, {
    generatedDate: framework.updatedAt || new Date().toISOString()
  });
  exporter.save(filename || `vision-framework-${Date.now()}.pdf`);
}

/**
 * Quick export function for complete package
 */
export function exportCompleteToPDF(data: any, filename?: string) {
  const exporter = new BanyanPDFExporter();
  exporter.exportComplete(data, {
    companyName: data.brief?.name,
    generatedDate: new Date().toISOString()
  });
  exporter.save(filename || `strategic-package-${Date.now()}.pdf`);
}

